<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Blog</title><link>https://blog.kfcviwo50.us.kg</link><description>仅作为个人学习输出</description><copyright>Blog</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/89264167?u=2b839a9613f690b43f7f3fb63ba6b8e0d536f208&amp;v=4</url><title>avatar</title><link>https://blog.kfcviwo50.us.kg</link></image><lastBuildDate>Tue, 08 Oct 2024 06:19:41 +0000</lastBuildDate><managingEditor>Blog</managingEditor><ttl>60</ttl><webMaster>Blog</webMaster><item><title>Serv00利用Cloudflare保活项目接入通知</title><link>https://blog.kfcviwo50.us.kg/post/Serv00-li-yong-Cloudflare-bao-huo-xiang-mu-jie-ru-tong-zhi.html</link><description>&gt; [!NOTE]&#13;
&gt; 文章来源：[XJFKKK](https://linux.do/t/topic/181957)&#13;
&#13;
### 一、创建worker&#13;
将下面代码复制进worker&#13;
```&#13;
addEventListener('fetch', event =&gt; {&#13;
  event.respondWith(handleRequest(event.request))&#13;
})&#13;
&#13;
addEventListener('scheduled', event =&gt; {&#13;
  event.waitUntil(handleScheduled(event.scheduledTime))&#13;
})&#13;
&#13;
async function handleRequest(request) {&#13;
  const url = new URL(request.url)&#13;
  &#13;
  if (url.pathname === '/login' &amp;&amp; request.method === 'POST') {&#13;
    const formData = await request.formData()&#13;
    const password = formData.get('password')&#13;
    &#13;
    if (password === PASSWORD) {&#13;
      const response = new Response(JSON.stringify({ success: true }), {&#13;
        headers: { 'Content-Type': 'application/json' }&#13;
      })&#13;
      response.headers.set('Set-Cookie', `auth=${PASSWORD}; HttpOnly; Secure; SameSite=Strict; Path=/; Max-Age=86400`)&#13;
      return response&#13;
    } else {&#13;
      return new Response(JSON.stringify({ success: false }), {&#13;
        headers: { 'Content-Type': 'application/json' }&#13;
      })&#13;
    }&#13;
  } else if (url.pathname === '/run' &amp;&amp; request.method === 'POST') {&#13;
    if (!isAuthenticated(request)) {&#13;
      return new Response('Unauthorized', { status: 401 })&#13;
    }&#13;
    &#13;
    await handleScheduled(new Date().toISOString())&#13;
    const results = await CRON_RESULTS.get('lastResults', 'json')&#13;
    return new Response(JSON.stringify(results), {&#13;
      headers: { 'Content-Type': 'application/json' }&#13;
    })&#13;
  } else if (url.pathname === '/results' &amp;&amp; request.method === 'GET') {&#13;
    if (!isAuthenticated(request)) {&#13;
      return new Response(JSON.stringify({ authenticated: false }), {&#13;
        headers: { 'Content-Type': 'application/json' }&#13;
      })&#13;
    }&#13;
    const results = await CRON_RESULTS.get('lastResults', 'json')&#13;
    return new Response(JSON.stringify({ authenticated: true, results: results || [] }), {&#13;
      headers: { 'Content-Type': 'application/json' }&#13;
    })&#13;
  } else if (url.pathname === '/check-auth' &amp;&amp; request.method === 'GET') {&#13;
    return new Response(JSON.stringify({ authenticated: isAuthenticated(request) }), {&#13;
      headers: { 'Content-Type': 'application/json' }&#13;
    })&#13;
  } else {&#13;
    // 显示登录页面或结果页面的 HTML&#13;
    return new Response(getHtmlContent(), {&#13;
      headers: { 'Content-Type': 'text/html' },&#13;
    })&#13;
  }&#13;
}&#13;
&#13;
function isAuthenticated(request) {&#13;
  const cookies = request.headers.get('Cookie')&#13;
  if (cookies) {&#13;
    const authCookie = cookies.split(';').find(c =&gt; c.trim().startsWith('auth='))&#13;
    if (authCookie) {&#13;
      const authValue = authCookie.split('=')[1]&#13;
      return authValue === PASSWORD&#13;
    }&#13;
  }&#13;
  return false&#13;
}&#13;
&#13;
function getHtmlContent() {&#13;
  return `&#13;
  &lt;!DOCTYPE html&gt;&#13;
  &lt;html lang='en'&gt;&#13;
  &lt;head&gt;&#13;
    &lt;meta charset='UTF-8'&gt;&#13;
    &lt;meta name='viewport' content='width=device-width, initial-scale=1.0'&gt;&#13;
    &lt;title&gt;Worker Control Panel&lt;/title&gt;&#13;
    &lt;style&gt;&#13;
      body {&#13;
        font-family: Arial, sans-serif;&#13;
        display: flex;&#13;
        justify-content: center;&#13;
        align-items: center;&#13;
        min-height: 100vh;&#13;
        margin: 0;&#13;
        background-color: #f0f0f0;&#13;
      }&#13;
      .container {&#13;
        text-align: center;&#13;
        padding: 20px;&#13;
        background-color: white;&#13;
        border-radius: 8px;&#13;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);&#13;
        max-width: 800px;&#13;
        width: 100%;&#13;
      }&#13;
      input, button {&#13;
        margin: 10px 0;&#13;
        padding: 10px;&#13;
        width: 200px;&#13;
        border-radius: 4px;&#13;
        border: 1px solid #ddd;&#13;
      }&#13;
      button {&#13;
        background-color: #4CAF50;&#13;
        border: none;&#13;
        color: white;&#13;
        cursor: pointer;&#13;
      }&#13;
      #status {&#13;
        margin-top: 20px;&#13;
        font-weight: bold;&#13;
      }&#13;
      table {&#13;
        width: 100%;&#13;
        border-collapse: collapse;&#13;
        margin-top: 20px;&#13;
      }&#13;
      th, td {&#13;
        border: 1px solid #ddd;&#13;
        padding: 8px;&#13;
        text-align: left;&#13;
      }&#13;
      th {&#13;
        background-color: #f2f2f2;&#13;
      }&#13;
      #loginForm, #dashboard {&#13;
        display: none;&#13;
      }&#13;
    &lt;/style&gt;&#13;
  &lt;/head&gt;&#13;
  &lt;body&gt;&#13;
    &lt;div class='container'&gt;&#13;
      &lt;h1&gt;Worker Control Panel&lt;/h1&gt;&#13;
      &lt;div id='loginForm'&gt;&#13;
        &lt;input type='password' id='password' placeholder='Enter password'&gt;&#13;
        &lt;button onclick='login()'&gt;Login&lt;/button&gt;&#13;
      &lt;/div&gt;&#13;
      &lt;div id='dashboard'&gt;&#13;
        &lt;button onclick='runScript()'&gt;Run Script&lt;/button&gt;&#13;
        &lt;div id='status'&gt;&lt;/div&gt;&#13;
        &lt;table id='resultsTable'&gt;&#13;
          &lt;thead&gt;&#13;
            &lt;tr&gt;&#13;
              &lt;th&gt;Account&lt;/th&gt;&#13;
              &lt;th&gt;Type&lt;/th&gt;&#13;
              &lt;th&gt;Status&lt;/th&gt;&#13;
              &lt;th&gt;Message&lt;/th&gt;&#13;
              &lt;th&gt;Last Run&lt;/th&gt;&#13;
            &lt;/tr&gt;&#13;
          &lt;/thead&gt;&#13;
          &lt;tbody&gt;&lt;/tbody&gt;&#13;
        &lt;/table&gt;&#13;
      &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;script&gt;&#13;
      let password = '';&#13;
&#13;
      function showLoginForm() {&#13;
        document.getElementById('loginForm').style.display = 'block';&#13;
        document.getElementById('dashboard').style.display = 'none';&#13;
      }&#13;
&#13;
      function showDashboard() {&#13;
        document.getElementById('loginForm').style.display = 'none';&#13;
        document.getElementById('dashboard').style.display = 'block';&#13;
        fetchResults();&#13;
      }&#13;
&#13;
      async function checkAuth() {&#13;
        const response = await fetch('/check-auth');&#13;
        const data = await response.json();&#13;
        if (data.authenticated) {&#13;
          showDashboard();&#13;
        } else {&#13;
          showLoginForm();&#13;
        }&#13;
      }&#13;
&#13;
      async function login() {&#13;
        password = document.getElementById('password').value;&#13;
        const formData = new FormData();&#13;
        formData.append('password', password);&#13;
        const response = await fetch('/login', { &#13;
          method: 'POST',&#13;
          body: formData&#13;
        });&#13;
        const result = await response.json();&#13;
        if (result.success) {&#13;
          showDashboard();&#13;
        } else {&#13;
          alert('Incorrect password');&#13;
        }&#13;
      }&#13;
&#13;
      async function runScript() {&#13;
        const statusDiv = document.getElementById('status');&#13;
        statusDiv.textContent = 'Executing script...';&#13;
        try {&#13;
          const response = await fetch('/run', { method: 'POST' });&#13;
          if (response.ok) {&#13;
            const results = await response.json();&#13;
            displayResults(results);&#13;
            statusDiv.textContent = 'Script executed successfully!';&#13;
          } else if (response.status === 401) {&#13;
            statusDiv.textContent = 'Unauthorized. Please login again.';&#13;
            showLoginForm();&#13;
          } else {&#13;
            statusDiv.textContent = 'Error executing script.';&#13;
          }&#13;
        } catch (error) {&#13;
          statusDiv.textContent = 'Error: ' + error.message;&#13;
        }&#13;
      }&#13;
&#13;
      async function fetchResults() {&#13;
        try {&#13;
          const response = await fetch('/results');&#13;
          if (response.ok) {&#13;
            const data = await response.json();&#13;
            if (data.authenticated) {&#13;
              displayResults(data.results);&#13;
            } else {&#13;
              showLoginForm();&#13;
            }&#13;
          } else {&#13;
            console.error('Failed to fetch results');&#13;
            showLoginForm();&#13;
          }&#13;
        } catch (error) {&#13;
          console.error('Error fetching results:', error);&#13;
          showLoginForm();&#13;
        }&#13;
      }&#13;
&#13;
      function displayResults(results) {&#13;
        const tbody = document.querySelector('#resultsTable tbody');&#13;
        tbody.innerHTML = '';&#13;
        results.forEach(result =&gt; {&#13;
          result.cronResults.forEach((cronResult, index) =&gt; {&#13;
            const row = tbody.insertRow();&#13;
            if (index === 0) {&#13;
              row.insertCell(0).textContent = result.username;&#13;
              row.insertCell(1).textContent = result.type;&#13;
            } else {&#13;
              row.insertCell(0).textContent = '';&#13;
              row.insertCell(1).textContent = '';&#13;
            }&#13;
            row.insertCell(2).textContent = cronResult.success ? 'Success' : 'Failed';&#13;
            row.insertCell(3).textContent = cronResult.message;&#13;
            row.insertCell(4).textContent = new Date(result.lastRun).toLocaleString();&#13;
          });&#13;
        });&#13;
      }&#13;
&#13;
      // 页面加载时检查认证状态&#13;
      document.addEventListener('DOMContentLoaded', checkAuth);&#13;
    &lt;/script&gt;&#13;
  &lt;/body&gt;&#13;
  &lt;/html&gt;&#13;
  `;&#13;
}&#13;
&#13;
async function handleScheduled(scheduledTime) {&#13;
  const accountsData = JSON.parse(ACCOUNTS_JSON);&#13;
  const accounts = accountsData.accounts;&#13;
  &#13;
  let results = [];&#13;
  for (const account of accounts) {&#13;
    const result = await loginAccount(account);&#13;
    results.push(result);&#13;
    await delay(Math.floor(Math.random() * 8000) + 1000);&#13;
  }&#13;
&#13;
  // 保存结果到 KV 存储&#13;
  await CRON_RESULTS.put('lastResults', JSON.stringify(results));&#13;
}&#13;
&#13;
function generateRandomUserAgent() {&#13;
  const browsers = ['Chrome', 'Firefox', 'Safari', 'Edge', 'Opera'];&#13;
  const browser = browsers[Math.floor(Math.random() * browsers.length)];&#13;
  const version = Math.floor(Math.random() * 100) + 1;&#13;
  const os = ['Windows NT 10.0', 'Macintosh', 'X11'];&#13;
  const selectedOS = os[Math.floor(Math.random() * os.length)];&#13;
  const osVersion = selectedOS === 'X11' ? 'Linux x86_64' : selectedOS === 'Macintosh' ? 'Intel Mac OS X 10_15_7' : 'Win64; x64';&#13;
&#13;
  return `Mozilla/5.0 (${selectedOS}; ${osVersion}) AppleWebKit/537.36 (KHTML, like Gecko) ${browser}/${version}.0.0.0 Safari/537.36`;&#13;
}&#13;
&#13;
async function loginAccount(account) {&#13;
  const { username, password, panelnum, type, cronCommands } = account&#13;
  let baseUrl = type === 'ct8' &#13;
    ? 'https://panel.ct8.pl' &#13;
    : `https://panel${panelnum}.serv00.com`&#13;
  let loginUrl = `${baseUrl}/login/?next=/cron/`&#13;
&#13;
  const userAgent = generateRandomUserAgent();&#13;
&#13;
  try {&#13;
    const response = await fetch(loginUrl, {&#13;
      method: 'GET',&#13;
      headers: {&#13;
        'User-Agent': userAgent,&#13;
      },&#13;
    })&#13;
&#13;
    const pageContent = await response.text()&#13;
    const csrfMatch = pageContent.match(/name='csrfmiddlewaretoken' value='([^']*)'/)&#13;
    const csrfToken = csrfMatch ? csrfMatch[1] : null&#13;
&#13;
    if (!csrfToken) {&#13;
      throw new Error('CSRF token not found')&#13;
    }&#13;
&#13;
    const initialCookies = response.headers.get('set-cookie') || ''&#13;
&#13;
    const formData = new URLSearchParams({&#13;
      'username': username,&#13;
      'password': password,&#13;
      'csrfmiddlewaretoken': csrfToken,&#13;
      'next': '/cron/'&#13;
    })&#13;
&#13;
    const loginResponse = await fetch(loginUrl, {&#13;
      method: 'POST',&#13;
      headers: {&#13;
        'Content-Type': 'application/x-www-form-urlencoded',&#13;
        'Referer': loginUrl,&#13;
        'User-Agent': userAgent,&#13;
        'Cookie': initialCookies,&#13;
      },&#13;
      body: formData.toString(),&#13;
      redirect: 'manual'&#13;
    })&#13;
&#13;
    if (loginResponse.status === 302 &amp;&amp; loginResponse.headers.get('location') === '/cron/') {&#13;
      const loginCookies = loginResponse.headers.get('set-cookie') || ''&#13;
      const allCookies = combineCookies(initialCookies, loginCookies)&#13;
&#13;
      // 访问 cron 列表页面&#13;
      const cronListUrl = `${baseUrl}/cron/`&#13;
      const cronListResponse = await fetch(cronListUrl, {&#13;
        headers: {&#13;
          'Cookie': allCookies,&#13;
          'User-Agent': userAgent,&#13;
        }&#13;
      })&#13;
      const cronListContent = await cronListResponse.text()&#13;
&#13;
      console.log(`Cron list URL: ${cronListUrl}`)&#13;
      console.log(`Cron list response status: ${cronListResponse.status}`)&#13;
      console.log(`Cron list content (first 1000 chars): ${cronListContent.substring(0, 1000)}`)&#13;
&#13;
      let cronResults = [];&#13;
      for (const cronCommand of cronCommands) {&#13;
        if (!cronListContent.includes(cronCommand)) {&#13;
          // 访问添加 cron 任务页面&#13;
          const addCronUrl = `${baseUrl}/cron/add`&#13;
          const addCronPageResponse = await fetch(addCronUrl, {&#13;
            headers: {&#13;
              'Cookie': allCookies,&#13;
              'User-Agent': userAgent,&#13;
              'Referer': cronListUrl,&#13;
            }&#13;
          })&#13;
          const addCronPageContent = await addCronPageResponse.text()&#13;
&#13;
          console.log(`Add cron page URL: ${addCronUrl}`)&#13;
          console.log(`Add cron page response status: ${addCronPageResponse.status}`)&#13;
          console.log(`Add cron page content (first 1000 chars): ${addCronPageContent.substring(0, 1000)}`)&#13;
&#13;
          const newCsrfMatch = addCronPageContent.match(/name='csrfmiddlewaretoken' value='([^']*)'/)&#13;
          const newCsrfToken = newCsrfMatch ? newCsrfMatch[1] : null&#13;
&#13;
          if (!newCsrfToken) {&#13;
            throw new Error('New CSRF token not found for adding cron task')&#13;
          }&#13;
&#13;
          const formData = new URLSearchParams({&#13;
            'csrfmiddlewaretoken': newCsrfToken,&#13;
            'spec': 'manual',&#13;
            'minute_time_interval': 'on',&#13;
            'minute': '15',&#13;
            'hour_time_interval': 'each',&#13;
            'hour': '*',&#13;
            'day_time_interval': 'each',&#13;
            'day': '*',&#13;
            'month_time_interval': 'each',&#13;
            'month': '*',&#13;
            'dow_time_interval': 'each',&#13;
            'dow': '*',&#13;
            'command': cronCommand,&#13;
            'comment': 'Auto added cron job'&#13;
          })&#13;
&#13;
          console.log('Form data being sent:', formData.toString())&#13;
&#13;
          const { success, response: addCronResponse, content: addCronResponseContent } = await addCronWithRetry(addCronUrl, {&#13;
            method: 'POST',&#13;
            headers: {&#13;
              'Content-Type': 'application/x-www-form-urlencoded',&#13;
              'Cookie': allCookies,&#13;
              'User-Agent': userAgent,&#13;
              'Referer': addCronUrl,&#13;
              'Origin': baseUrl,&#13;
              'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',&#13;
              'Accept-Language': 'en-US,en;q=0.5',&#13;
              'Upgrade-Insecure-Requests': '1'&#13;
            },&#13;
            body: formData.toString(),&#13;
          })&#13;
&#13;
          console.log('Full response content:', addCronResponseContent)&#13;
&#13;
          if (success) {&#13;
            if (addCronResponseContent.includes('Cron job has been added') || addCronResponseContent.includes('Zadanie cron zostało dodane')) {&#13;
              const message = `添加了新的 cron 任务：${cronCommand}`;&#13;
              console.log(message);&#13;
              await sendTelegramMessage(`账号 ${username} (${type}) ${message}`);&#13;
              cronResults.push({ success: true, message });&#13;
            } else {&#13;
              // 如果响应中没有成功信息，再次检查cron列表&#13;
              const checkCronListResponse = await fetch(cronListUrl, {&#13;
                headers: {&#13;
                  'Cookie': allCookies,&#13;
                  'User-Agent': userAgent,&#13;
                }&#13;
              });&#13;
              const checkCronListContent = await checkCronListResponse.text();&#13;
              &#13;
              if (checkCronListContent.includes(cronCommand)) {&#13;
                const message = `确认添加了新的 cron 任务：${cronCommand}`;&#13;
                console.log(message);&#13;
                await sendTelegramMessage(`账号 ${username} (${type}) ${message}`);&#13;
                cronResults.push({ success: true, message });&#13;
              } else {&#13;
                const message = `尝试添加 cron 任务：${cronCommand}，但在列表中未找到。</description><guid isPermaLink="true">https://blog.kfcviwo50.us.kg/post/Serv00-li-yong-Cloudflare-bao-huo-xiang-mu-jie-ru-tong-zhi.html</guid><pubDate>Sun, 06 Oct 2024 02:26:46 +0000</pubDate></item><item><title>Serv00利用Cloudflare保活-接入通知</title><link>https://blog.kfcviwo50.us.kg/post/Serv00-li-yong-Cloudflare-bao-huo---jie-ru-tong-zhi.html</link><description>&gt; [!NOTE]&#13;
&gt; 文章来源：[XJFKKK](https://linux.do/t/topic/180293)&#13;
&#13;
现在在cloudflare worker中直接一个代码就解决了，然后在变量加入一个cron就行了。</description><guid isPermaLink="true">https://blog.kfcviwo50.us.kg/post/Serv00-li-yong-Cloudflare-bao-huo---jie-ru-tong-zhi.html</guid><pubDate>Sun, 06 Oct 2024 02:17:03 +0000</pubDate></item><item><title>Serv00监控保活</title><link>https://blog.kfcviwo50.us.kg/post/Serv00-jian-kong-bao-huo.html</link><description>&gt; [!NOTE]&#13;
&gt; 文章来源：[拾光](https://blog.mado.us.kg/)&#13;
&#13;
### 1. 创建 Telegram Bot 并获取 Token&#13;
首先，需要在 Telegram 上创建一个 Bot 并获取其 Token。</description><guid isPermaLink="true">https://blog.kfcviwo50.us.kg/post/Serv00-jian-kong-bao-huo.html</guid><pubDate>Sat, 05 Oct 2024 01:26:18 +0000</pubDate></item><item><title>vps避免暴力扫描-Fail2ban安装</title><link>https://blog.kfcviwo50.us.kg/post/vps-bi-mian-bao-li-sao-miao--Fail2ban-an-zhuang.html</link><description>&gt; [!NOTE]&#13;
&gt; 文章来源：[北京大学](https://its.pku.edu.cn/faq_fail2ban.jsp)&#13;
       &#13;
对于校园网中近期发现的针对Linux系统的ssh暴力破解行为，可以通过安装fail2ban加强防护。</description><guid isPermaLink="true">https://blog.kfcviwo50.us.kg/post/vps-bi-mian-bao-li-sao-miao--Fail2ban-an-zhuang.html</guid><pubDate>Sun, 29 Sep 2024 04:32:37 +0000</pubDate></item><item><title>Gmeek博客指南</title><link>https://blog.kfcviwo50.us.kg/post/Gmeek-bo-ke-zhi-nan.html</link><description>### Gmeek作者博客&#13;
[Gmeek作者博客](https://blog.meekdai.com)&#13;
&#13;
### Mrakdown语法的实现案例：&#13;
[Mrakdown语法的实现案例](https://diyingisader.github.io/zang_diying.github.io/post/guan-yu-Gmeek%20-bo-ke-%20-%20-dai-ma-%E3%80%81-zhu-ye-she-zhi-de-meng-xin-jiao-cheng.html)&#13;
&#13;
### 相关博客作者&#13;
[CJW](https://blog.freeblock.cn/)        [拾光](https://blog.mado.us.kg/)&#13;
### 相关视频&#13;
&#13;
`Gmeek-html&lt;iframe src='//player.bilibili.com/player.html?isOutside=true&amp;aid=1305790042&amp;bvid=BV1GM4m1m7ZD&amp;cid=1588230883&amp;p=1&amp;autoplay=0' scrolling='no' border='0' frameborder='no' framespacing='0' allowfullscreen='true' width='100%' height='460px'&gt;&lt;/iframe&gt;`。</description><guid isPermaLink="true">https://blog.kfcviwo50.us.kg/post/Gmeek-bo-ke-zhi-nan.html</guid><pubDate>Sun, 29 Sep 2024 02:14:29 +0000</pubDate></item></channel></rss>